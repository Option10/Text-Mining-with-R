} # end if LDA
#################  Pubmed query
if (input$method == "Pubmed query") {
query_system <- dget("Source/Extract_Data.R")
abstractSize <- c(100,3000) # min and max caracter in abstracts analysed
df <- query_system(input$positive_query,abstractSize)
DT = data.table(
Title = df$Title[1:input$max_Results],
Abstract = df$Abstract[1:input$max_Results],
ID = df$ID[1:input$max_Results],
Date = df$Date[1:input$max_Results],
Authors = gsub("/", ", ",df$Author[1:input$max_Results]))
} # end Pubmed query
# as.Date(df$Date[100:110], "%Y")
##### Print output:
output$show_Results_num <- renderText({ paste("We found:",length(Result),"results, showing", input$max_Results) })
output$table <- renderTable(DT)
}) # end Render OK
}
#################  LSA
if (input$method == "LSA") {
query_system <- dget("Source/LSA_query_system.R")
if (sum(which(rownames(irlba$v) == "hepatic")) > 0){
stemming <- FALSE
}else{stemming <- TRUE}
query_output <- query_system(irlba,input$positive_query,input$negative_query,df$Abstract,stemming)
Result <- query_output$res
error <- query_output$err
output$error <- renderText({error})
# cat(input$positive_query,input$negative_query)
exampletext <- df$Abstract[Result[1]]
output$thetextoutput <- renderUI({
words <- strsplit(example.text, " ")[[1]]
lapply(words, function(word) {
col <- default_colour
if (word %in% names(word_colour_map)) {
col <- word_colour_map[[word]]
}
tags$span(style = paste("color:", col), word)
})
})
DT = data.table(
Title = df$Title[Result[1:input$max_Results]],
Abstract = df$Abstract[Result[1:input$max_Results]],
ID = df$ID[Result[1:input$max_Results]],
Date = df$Date[Result[1:input$max_Results]],
Authors = gsub("/", ", ", df$Authors[Result[1:input$max_Results]]))
} # end if LSA
# cat(input$positive_query,input$negative_query)
exampletext <- df$Abstract[Result[1]]
query_output <- query_system(irlba,input$positive_query,input$negative_query,df$Abstract,stemming)
query_system <- dget("Source/LSA_query_system.R")
if (sum(which(rownames(irlba$v) == "hepatic")) > 0){
stemming <- FALSE
}else{stemming <- TRUE}
query_output <- query_system(irlba,input$positive_query,input$negative_query,df$Abstract,stemming)
input$positive_query<- "cancer"
input$negative_query<- ""
query_output <- query_system(irlba,input$positive_query,input$negative_query,df$Abstract,stemming)
inputpositive_query<- "cancer"
inputnegative_query<- ""
query_output <- query_system(irlba,inputpositive_query,inputnegative_query,df$Abstract,stemming)
Result <- query_output$res
error <- query_output$err
output$error <- renderText({error})
# cat(input$positive_query,input$negative_query)
exampletext <- df$Abstract[Result[1]]
exampletext
words <- strsplit(example.text, " ")[[1]]
words <- strsplit(exampletext, " ")[[1]]
# cat(input$positive_query,input$negative_query)
exampletext <- as.character(df$Abstract[Result[1]])
words <- strsplit(exampletext, " ")[[1]]
words
lapply(words, function(word) {
col <- default_colour
if (word %in% names(word_colour_map)) {
col <- word_colour_map[[word]]
}
tags$span(style = paste("color:", col), word)
})
tags$span(style = paste("color:", col), word)
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('~/Desktop/colourtext.R')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
df$Abstract[Result[1:input$max_Results]]
df$Abstract[Result[1:3]]
df$Abstract[Result[1]]
df$Abstract[Result[1]]
exampletext <- as.character(df$Abstract[Result[1]])
exampletext
exampletext <- as.character(df$Abstract[Result[1:2]])
exampletext
words <- strsplit(exampletext, " ")[[1]]
words
words <- strsplit(exampletext, " ")
words
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
knitr::opts_chunk$set(echo = TRUE)
a<- c(123)
print(a)
# cat(input$positive_query,input$negative_query)
exampletext <- as.character(df$Abstract[Result[1]])
outputthetextoutput <- function(exampletext){
words <- strsplit(exampletext, " ")[[1]]
lapply(words, function(word) {
col <- default_colour
if (word %in% names(word_colour_map)) {
col <- word_colour_map[[word]]
}
tags$span(style = paste("color:", col), word)
})
return(word)
}
outputthetextoutput
outputthetextoutput(exampletext)
outputthetextoutput <- function(exampletext){
words <- strsplit(exampletext, " ")[[1]]
lapply(words, function(word) {
col <- default_colour
if (word %in% names(word_colour_map)) {
col <- word_colour_map[[word]]
}
tags$span(style = paste("color:", col), word)
})
return(words)
}
outputthetextoutput(exampletext)
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
# global search
datatable(mtcars2, options = list(searchHighlight = TRUE, search = list(search = 'da')))
library(DT)
mtcars2 = head(mtcars[, 1:5], 20)
mtcars2$model = rownames(mtcars2)
rownames(mtcars2) = NULL
options(DT.options = list(pageLength = 5))
# global search
datatable(mtcars2, options = list(searchHighlight = TRUE, search = list(search = 'da')))
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
DT::datatable(iris)
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
library(DT)
datatable(
cbind(' ' = '&oplus;', mtcars), escape = -2,
options = list(
columnDefs = list(
list(visible = FALSE, targets = c(0, 2, 3)),
list(orderable = FALSE, className = 'details-control', targets = 1)
)
),
callback = JS("
table.column(1).nodes().to$().css({cursor: 'pointer'});
var format = function(d) {
return '<div style=\"background-color:#eee; padding: .5em;\"> Model: ' +
d[0] + ', mpg: ' + d[2] + ', cyl: ' + d[3] + '</div>';
};
table.on('click', 'td.details-control', function() {
var td = $(this), row = table.row(td.closest('tr'));
if (row.child.isShown()) {
row.child.hide();
td.html('&oplus;');
} else {
row.child(format(row.data())).show();
td.html('&CircleMinus;');
}
});"
))
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
c(0, 1, 3)
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
df$Date[Result]
df$Date[Result[1]]
as.character(df$Date[Result[1]])
as.Date(as.character(df$Date[Result[1]]))
as.Date(as.character(df$Date[Result[1]]),format = "%Y")
runApp('GUI')
as.Date(as.character(df$Date[Result[1:3]]),format = "%Y%b")
as.Date(as.character(df$Date[Result[1:3]]),format = "%Y")
as.Date(as.character(df$Date[Result[1:3]]),format = "%Y%b%d")
as.Date(as.character(df$Date[Result[1:3]]),format = "%Y-b")
as.Date(as.character(df$Date[Result[1:3]]),format = "%Y-%b")
as.Date(as.character(df$Date[Result[1:3]]),format = "%Y %d")
as.Date(as.character(df$Date[Result[1:3]]),format = "%Y %b")
as.Date(as.character(df$Date[Result[1:3]]),format = "%Y %b %d")
as.Date(as.character(df$Date[Result[1:3]]),format = "%Y %m %d")
as.Date(as.character(df$Date[Result[1:3]]),format = "%Y %m %b")
as.Date(as.character(df$Date[Result[1:3]]),format = "%Y %m %d")
as.Date(as.character(df$Date[Result[1:3]]),format = "%Y %B %d")
as.Date(as.character(df$Date[Result[1:3]]),format = "%Y %b %d")
as.Date(as.character(df$Date[Result[1:3]]),format = "%Y%b %d")
as.Date(as.character(df$Date[Result[1:3]]),format = "%Y%b%d")
as.Date(as.character(df$Date[Result[1:3]]),format = "%y%b%d")
as.Date(as.character(df$Date[Result[1:3]]),format = "%y")
as.Date(as.character(df$Date[Result[1:3]]),format = "%b")
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
for (i in 1:10) {
ID <- a(df$ID[Result[i]], href="https://www.ncbi.nlm.nih.gov/pubmed/?term="+df$ID[Result[i]])
}
for (i in 1:10) {
ID <- a(df$ID[Result[i]], href="https://www.ncbi.nlm.nih.gov/pubmed/?term=",df$ID[Result[i]])
}
for (i in 1:10) {
ID <- a(df$ID[Result[i]], href="https://www.ncbi.nlm.nih.gov/pubmed/?term=",df$ID[Result[i]])
}
ID
for (i in 1:10) {
ID <- a(df$ID[Result[i]], href=paste("https://www.ncbi.nlm.nih.gov/pubmed/?term=",df$ID[Result[i]])
}
for (i in 1:10) {
ID <- a(df$ID[Result[i]], href=paste("https://www.ncbi.nlm.nih.gov/pubmed/?term=",df$ID[Result[i]]))
}
ID
for (i in 1:10) {
ID <- a(df$ID[Result[i]], href=paste("https://www.ncbi.nlm.nih.gov/pubmed/?term=",df$ID[Result[i]]),sep=="")
}
?paste
for (i in 1:10) {
ID <- a(df$ID[Result[i]], href=paste("https://www.ncbi.nlm.nih.gov/pubmed/?term=",df$ID[Result[i]]),sep="")
}
ID
for (i in 1:10) {
ID <- a(df$ID[Result[i]], href=paste("https://www.ncbi.nlm.nih.gov/pubmed/?term=",df$ID[Result[i]]),collapse = TRUE)
}
ID
for (i in 1:10) {
ID <- a(df$ID[Result[i]], href=paste("https://www.ncbi.nlm.nih.gov/pubmed/?term=",df$ID[Result[i]]),collapse =NULL)
}
ID
for (i in 1:10) {
ID <- a(df$ID[Result[i]], href=paste("https://www.ncbi.nlm.nih.gov/pubmed/?term=",df$ID[Result[i]]),collapse ="")
}
ID
for (i in 1:10) {
ID <- a(df$ID[Result[i]], href=paste("https://www.ncbi.nlm.nih.gov/pubmed/?term=",df$ID[Result[i]],collapse =""))
}
ID
for (i in 1:10) {
ID <- a(df$ID[Result[i]], href=paste("https://www.ncbi.nlm.nih.gov/pubmed/?term=",df$ID[Result[i]],collapse =TRUE))
}
for (i in 1:10) {
ID <- a(df$ID[Result[i]], href=paste("https://www.ncbi.nlm.nih.gov/pubmed/?term=",df$ID[Result[i]],collapse =NULL))
}
ID
for (i in 1:10) {
ID <- a(df$ID[Result[i]], href=paste("https://www.ncbi.nlm.nih.gov/pubmed/?term=",df$ID[Result[i]],collapse ="ooo"))
}
ID
for (i in 1:10) {
ID <- a(df$ID[Result[i]], href=paste("https://www.ncbi.nlm.nih.gov/pubmed/?term=",df$ID[Result[i]],collapse =" "))
}
I
ID
for (i in 1:10) {
ID <- a(df$ID[Result[i]], href=paste("https://www.ncbi.nlm.nih.gov/pubmed/?term=",df$ID[Result[i]]))
}
ID
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
for (i in 1:10) {ID<-"<a href=\"https://www.ncbi.nlm.nih.gov/pubmed/?term=29031977\">29031977</a>"
)
ID<-"<a href=\"https://www.ncbi.nlm.nih.gov/pubmed/?term=29031977\">29031977</a>"
ID
ID<-"<a href="https://www.ncbi.nlm.nih.gov/pubmed/?term=29031977">29031977</a>"
ID<-"\<a href="https://www.ncbi.nlm.nih.gov/pubmed/?term=29031977">29031977</a>"
ID<-"<a href="https://www.ncbi.nlm.nih.gov/pubmed/?term=29031977">29031977</a>"
ID<-"<a href='https://www.ncbi.nlm.nih.gov/pubmed/?term=29031977'>29031977</a>"
ID
runApp('GUI')
runApp('GUI')
ID<-paste("<a href='https://www.ncbi.nlm.nih.gov/pubmed/?term=",df$ID[Result],"'>",df$ID[Result],"</a>")
ID
ID<-paste("<a href='https://www.ncbi.nlm.nih.gov/pubmed/?term=",df$ID[Result],"'>",df$ID[Result],"</a>")
ID<-paste("<a href='https://www.ncbi.nlm.nih.gov/pubmed/?term=",df$ID[Result],"'>",df$ID[Result],"</a>")
ID<-paste("<a href='https://www.ncbi.nlm.nih.gov/pubmed/?term=",df$ID[Result],"'>",df$ID[Result],"</a>",collapse = FALSE)
ID<-paste("<a href='https://www.ncbi.nlm.nih.gov/pubmed/?term=",df$ID[Result],"'>",df$ID[Result],"</a>",collapse ="")
ID
ID<-paste("<a href='https://www.ncbi.nlm.nih.gov/pubmed/?term=",df$ID[Result],"'>",df$ID[Result],"</a>")
ID
ID<-paste("<a href='https://www.ncbi.nlm.nih.gov/pubmed/?term=",df$ID[Result],"'>",df$ID[Result],"</a>",sep = "")
ID
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
?hr
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
includeCSS("/home/francois/Documents/Projet_Text_mining/Text-Mining-with-R/Text_mining_project/GUI/www/stylesheet.css")
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
