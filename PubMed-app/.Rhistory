# Run the app ----
shinyApp(ui = ui, server = server)
# setwd("~/Desktop/census-app")
library(shiny)
library(topicmodels)
df <- readRDS("data/Dataframe.rds")
ap_documents <- readRDS("data/ap_documents.rds")
ap_lda <- readRDS("data/ap_lda.rds")
ap_topics <- readRDS("data/ap_topics.rds")
ap_top_terms <- readRDS("data/ap_top_terms.rds")
# ID, Abstract, title, date, Author
# Define UI ----
ui <- fluidPage(
titlePanel("Search PubMed"),
sidebarLayout(
sidebarPanel(
textInput("positive_querry","Search:"),
helpText("It is possible to add a negative querry in order to avoid sertain topics"),
textInput("negative_querry","negative querry:"),
selectInput("var",
label = "What are you looking for?",
choices = c("Abstracts",
"Author",
"Date"),
selected = "Abstracts"),
numericInput("num", label = h3("Abstract position"), value = 1)
),
mainPanel(
# tableOutput('table'),
textOutput("selected_var"),
br(),
strong("Title:"),
textOutput("chosen_title"),
hr(),
strong("Abstract:"),
verbatimTextOutput("chosen_abstract"),
textOutput("chosen_id"),
textOutput("chosen_date"),
textOutput("chosen_author"),
hr()
)
)
)
# Define server logic --------------------------
server <- function(input, output) {
ind_pos <- renderPrint({which(ap_top_terms$term==input$positive_querry)})
topic_int_pos <- ap_top_terms$topic[ind_pos]
if (length(topic_int_pos)<1) {
print("Your positive querry isn't significant in any of our topics, try an other research")
}
ind_neg <- which(ap_top_terms$term==input$negative_querry)
topic_int_neg <- ap_top_terms$topic[ind_neg]
if (length(topic_int_neg)<1) {
print("Your negative querry isn't significant in any of our topics, try an other research or continue" )
}
#
#   output$table <- renderTable({c(
#     paste("Title:", df[input$num,3]),
#     paste("Abstract:", df[input$num,2]),
#     paste("Author:", df[input$num,5]),
#     paste("Published on:", df[input$num,4]),
#     paste("Text ID:", df[input$num,1]))
#   })
output$chosen_id <- renderText({
paste("Text ID:", df[input$num,1])
})
output$chosen_abstract <- renderText({
paste(df[input$num,2])
})
output$chosen_title <- renderText({
paste(df[input$num,3])
})
output$chosen_date <- renderText({
paste("Published on:", df[input$num,4])
})
output$chosen_author <- renderText({
paste("Author:", df[input$num,5])
})
}
# Run the app ----
shinyApp(ui = ui, server = server)
# setwd("~/Desktop/census-app")
library(shiny)
library(topicmodels)
df <- readRDS("data/Dataframe.rds")
ap_documents <- readRDS("data/ap_documents.rds")
ap_lda <- readRDS("data/ap_lda.rds")
ap_topics <- readRDS("data/ap_topics.rds")
ap_top_terms <- readRDS("data/ap_top_terms.rds")
# ID, Abstract, title, date, Author
# Define UI ----
ui <- fluidPage(
titlePanel("Search PubMed"),
sidebarLayout(
sidebarPanel(
textInput("positive_querry","Search:"),
helpText("It is possible to add a negative querry in order to avoid sertain topics"),
textInput("negative_querry","negative querry:"),
selectInput("var",
label = "What are you looking for?",
choices = c("Abstracts",
"Author",
"Date"),
selected = "Abstracts"),
numericInput("num", label = h3("Abstract position"), value = 1)
),
mainPanel(
# tableOutput('table'),
textOutput("selected_var"),
br(),
strong("Title:"),
textOutput("chosen_title"),
hr(),
strong("Abstract:"),
verbatimTextOutput("chosen_abstract"),
textOutput("chosen_id"),
textOutput("chosen_date"),
textOutput("chosen_author"),
hr()
)
)
)
# Define server logic --------------------------
server <- function(input, output) {
ind_pos <- renderPrint({which(ap_top_terms$term==input$positive_querry)})
topic_int_pos <- renderTable({ap_top_terms$topic[ind_pos]})
if (length(topic_int_pos)<1) {
print("Your positive querry isn't significant in any of our topics, try an other research")
}
ind_neg <- which(ap_top_terms$term==input$negative_querry)
topic_int_neg <- ap_top_terms$topic[ind_neg]
if (length(topic_int_neg)<1) {
print("Your negative querry isn't significant in any of our topics, try an other research or continue" )
}
#
#   output$table <- renderTable({c(
#     paste("Title:", df[input$num,3]),
#     paste("Abstract:", df[input$num,2]),
#     paste("Author:", df[input$num,5]),
#     paste("Published on:", df[input$num,4]),
#     paste("Text ID:", df[input$num,1]))
#   })
output$chosen_id <- renderText({
paste("Text ID:", df[input$num,1])
})
output$chosen_abstract <- renderText({
paste(df[input$num,2])
})
output$chosen_title <- renderText({
paste(df[input$num,3])
})
output$chosen_date <- renderText({
paste("Published on:", df[input$num,4])
})
output$chosen_author <- renderText({
paste("Author:", df[input$num,5])
})
}
# Run the app ----
shinyApp(ui = ui, server = server)
# setwd("~/Desktop/census-app")
library(shiny)
library(topicmodels)
df <- readRDS("data/Dataframe.rds")
ap_documents <- readRDS("data/ap_documents.rds")
ap_lda <- readRDS("data/ap_lda.rds")
ap_topics <- readRDS("data/ap_topics.rds")
ap_top_terms <- readRDS("data/ap_top_terms.rds")
# ID, Abstract, title, date, Author
# Define UI ----
ui <- fluidPage(
titlePanel("Search PubMed"),
sidebarLayout(
sidebarPanel(
textInput("positive_querry","Search:"),
helpText("It is possible to add a negative querry in order to avoid sertain topics"),
textInput("negative_querry","negative querry:"),
selectInput("var",
label = "What are you looking for?",
choices = c("Abstracts",
"Author",
"Date"),
selected = "Abstracts"),
numericInput("num", label = h3("Abstract position"), value = 1)
),
mainPanel(
# tableOutput('table'),
textOutput("selected_var"),
br(),
strong("Title:"),
textOutput("chosen_title"),
hr(),
strong("Abstract:"),
verbatimTextOutput("chosen_abstract"),
textOutput("chosen_id"),
textOutput("chosen_date"),
textOutput("chosen_author"),
hr()
)
)
)
# Define server logic --------------------------
server <- function(input, output) {
positive_querry <- renderText(input$positive_querry)
ind_pos <- which(ap_top_terms$term==positive_querry)
topic_int_pos <- ap_top_terms$topic[ind_pos]
#
# if (length(topic_int_pos)<1) {
#   print("Your positive querry isn't significant in any of our topics, try an other research")
# }
#
# ind_neg <- which(ap_top_terms$term==input$negative_querry)
# topic_int_neg <- ap_top_terms$topic[ind_neg]
#
# if (length(topic_int_neg)<1) {
#   print("Your negative querry isn't significant in any of our topics, try an other research or continue" )
# }
#
#   output$table <- renderTable({c(
#     paste("Title:", df[input$num,3]),
#     paste("Abstract:", df[input$num,2]),
#     paste("Author:", df[input$num,5]),
#     paste("Published on:", df[input$num,4]),
#     paste("Text ID:", df[input$num,1]))
#   })
output$chosen_id <- renderText({
paste("Text ID:", df[input$num,1])
})
output$chosen_abstract <- renderText({
paste(df[input$num,2])
})
output$chosen_title <- renderText({
paste(df[input$num,3])
})
output$chosen_date <- renderText({
paste("Published on:", df[input$num,4])
})
output$chosen_author <- renderText({
paste("Author:", df[input$num,5])
})
}
# Run the app ----
shinyApp(ui = ui, server = server)
# setwd("~/Desktop/census-app")
library(shiny)
library(topicmodels)
df <- readRDS("data/Dataframe.rds")
ap_documents <- readRDS("data/ap_documents.rds")
ap_lda <- readRDS("data/ap_lda.rds")
ap_topics <- readRDS("data/ap_topics.rds")
ap_top_terms <- readRDS("data/ap_top_terms.rds")
# ID, Abstract, title, date, Author
# Define UI ----
ui <- fluidPage(
titlePanel("Search PubMed"),
sidebarLayout(
sidebarPanel(
textInput("positive_querry","Search:"),
helpText("It is possible to add a negative querry in order to avoid sertain topics"),
textInput("negative_querry","negative querry:"),
selectInput("var",
label = "What are you looking for?",
choices = c("Abstracts",
"Author",
"Date"),
selected = "Abstracts"),
numericInput("num", label = h3("Abstract position"), value = 1)
),
mainPanel(
# tableOutput('table'),
textOutput("selected_var"),
br(),
strong("Title:"),
textOutput("chosen_title"),
hr(),
strong("Abstract:"),
verbatimTextOutput("chosen_abstract"),
textOutput("chosen_id"),
textOutput("chosen_date"),
textOutput("chosen_author"),
hr()
)
)
)
# Define server logic --------------------------
server <- function(input, output) {
positive_querry <- renderText({input$positive_querry})
ind_pos <- which(ap_top_terms$term==positive_querry)
topic_int_pos <- ap_top_terms$topic[ind_pos]
#
# if (length(topic_int_pos)<1) {
#   print("Your positive querry isn't significant in any of our topics, try an other research")
# }
#
# ind_neg <- which(ap_top_terms$term==input$negative_querry)
# topic_int_neg <- ap_top_terms$topic[ind_neg]
#
# if (length(topic_int_neg)<1) {
#   print("Your negative querry isn't significant in any of our topics, try an other research or continue" )
# }
#
#   output$table <- renderTable({c(
#     paste("Title:", df[input$num,3]),
#     paste("Abstract:", df[input$num,2]),
#     paste("Author:", df[input$num,5]),
#     paste("Published on:", df[input$num,4]),
#     paste("Text ID:", df[input$num,1]))
#   })
output$chosen_id <- renderText({
paste("Text ID:", df[input$num,1])
})
output$chosen_abstract <- renderText({
paste(df[input$num,2])
})
output$chosen_title <- renderText({
paste(df[input$num,3])
})
output$chosen_date <- renderText({
paste("Published on:", df[input$num,4])
})
output$chosen_author <- renderText({
paste("Author:", df[input$num,5])
})
}
# Run the app ----
shinyApp(ui = ui, server = server)
# setwd("~/Desktop/census-app")
library(shiny)
library(topicmodels)
df <- readRDS("data/Dataframe.rds")
ap_documents <- readRDS("data/ap_documents.rds")
ap_lda <- readRDS("data/ap_lda.rds")
ap_topics <- readRDS("data/ap_topics.rds")
ap_top_terms <- readRDS("data/ap_top_terms.rds")
# ID, Abstract, title, date, Author
# Define UI ----
ui <- fluidPage(
titlePanel("Search PubMed"),
sidebarLayout(
sidebarPanel(
textInput("positive_querry","Search:"),
helpText("It is possible to add a negative querry in order to avoid sertain topics"),
textInput("negative_querry","negative querry:"),
selectInput("var",
label = "What are you looking for?",
choices = c("Abstracts",
"Author",
"Date"),
selected = "Abstracts"),
numericInput("num", label = h3("Abstract position"), value = 1)
),
mainPanel(
# tableOutput('table'),
textOutput("selected_var"),
br(),
strong("Title:"),
textOutput("chosen_title"),
hr(),
strong("Abstract:"),
verbatimTextOutput("chosen_abstract"),
textOutput("chosen_id"),
textOutput("chosen_date"),
textOutput("chosen_author"),
hr()
)
)
)
# Define server logic --------------------------
server <- function(input, output) {
positive_querry <- renderText({input$positive_querry})
print(positive_querry)
ind_pos <- which(ap_top_terms$term==positive_querry)
topic_int_pos <- ap_top_terms$topic[ind_pos]
#
# if (length(topic_int_pos)<1) {
#   print("Your positive querry isn't significant in any of our topics, try an other research")
# }
#
# ind_neg <- which(ap_top_terms$term==input$negative_querry)
# topic_int_neg <- ap_top_terms$topic[ind_neg]
#
# if (length(topic_int_neg)<1) {
#   print("Your negative querry isn't significant in any of our topics, try an other research or continue" )
# }
#
#   output$table <- renderTable({c(
#     paste("Title:", df[input$num,3]),
#     paste("Abstract:", df[input$num,2]),
#     paste("Author:", df[input$num,5]),
#     paste("Published on:", df[input$num,4]),
#     paste("Text ID:", df[input$num,1]))
#   })
output$chosen_id <- renderText({
paste("Text ID:", df[input$num,1])
})
output$chosen_abstract <- renderText({
paste(df[input$num,2])
})
output$chosen_title <- renderText({
paste(df[input$num,3])
})
output$chosen_date <- renderText({
paste("Published on:", df[input$num,4])
})
output$chosen_author <- renderText({
paste("Author:", df[input$num,5])
})
}
# Run the app ----
shinyApp(ui = ui, server = server)
# setwd("~/Desktop/census-app")
library(shiny)
library(topicmodels)
df <- readRDS("data/Dataframe.rds")
ap_documents <- readRDS("data/ap_documents.rds")
ap_lda <- readRDS("data/ap_lda.rds")
ap_topics <- readRDS("data/ap_topics.rds")
ap_top_terms <- readRDS("data/ap_top_terms.rds")
# ID, Abstract, title, date, Author
# Define UI ----
ui <- fluidPage(
titlePanel("Search PubMed"),
sidebarLayout(
sidebarPanel(
textInput("positive_querry","Search:"),
helpText("It is possible to add a negative querry in order to avoid sertain topics"),
textInput("negative_querry","negative querry:"),
selectInput("var",
label = "What are you looking for?",
choices = c("Abstracts",
"Author",
"Date"),
selected = "Abstracts"),
numericInput("num", label = h3("Abstract position"), value = 1)
),
mainPanel(
# tableOutput('table'),
textOutput("selected_var"),
br(),
strong("Title:"),
textOutput("chosen_title"),
hr(),
strong("Abstract:"),
verbatimTextOutput("chosen_abstract"),
textOutput("chosen_id"),
textOutput("chosen_date"),
textOutput("chosen_author"),
hr()
)
)
)
# Define server logic --------------------------
server <- function(input, output) {
positive_querry <- renderText({input$positive_querry})
print(positive_querry)
# ind_pos <- which(ap_top_terms$term==positive_querry)
# topic_int_pos <- ap_top_terms$topic[ind_pos]
#
# if (length(topic_int_pos)<1) {
#   print("Your positive querry isn't significant in any of our topics, try an other research")
# }
#
# ind_neg <- which(ap_top_terms$term==input$negative_querry)
# topic_int_neg <- ap_top_terms$topic[ind_neg]
#
# if (length(topic_int_neg)<1) {
#   print("Your negative querry isn't significant in any of our topics, try an other research or continue" )
# }
#
#   output$table <- renderTable({c(
#     paste("Title:", df[input$num,3]),
#     paste("Abstract:", df[input$num,2]),
#     paste("Author:", df[input$num,5]),
#     paste("Published on:", df[input$num,4]),
#     paste("Text ID:", df[input$num,1]))
#   })
output$chosen_id <- renderText({
paste("Text ID:", df[input$num,1])
})
output$chosen_abstract <- renderText({
paste(df[input$num,2])
})
output$chosen_title <- renderText({
paste(df[input$num,3])
})
output$chosen_date <- renderText({
paste("Published on:", df[input$num,4])
})
output$chosen_author <- renderText({
paste("Author:", df[input$num,5])
})
}
# Run the app ----
shinyApp(ui = ui, server = server)
k=20
df <- readRDS("data/Dataframe.rds")
ap_documents <- readRDS("data/ap_documents.rds")
ap_lda <- readRDS("data/ap_lda.rds")
ap_topics <- readRDS("data/ap_topics.rds")
ap_top_terms <- readRDS("data/ap_top_terms.rds")
library(topicmodels)
df <- readRDS("data/Dataframe.rds")
library(topicmodels)
install.packages("topicmodels")
library(topicmodels)
library(topicmodels)
# setwd("~/Desktop/census-app")
library(shiny)
library(topicmodels)
library(topicmodels)
install.packages("topicmodels")
library(topicmodels)
